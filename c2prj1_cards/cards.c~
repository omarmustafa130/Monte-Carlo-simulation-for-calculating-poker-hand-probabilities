#include <stdio.h>
#include <assert.h>
#include <stdlib.h>
#include "cards.h"


void assert_card_valid(card_t c) {
  assert((c.value>=2 && c.value<=VALUE_ACE) && (c.suit>=SPADES && c.suit<=CLUBS));
}

const char * ranking_to_string(hand_ranking_t r) {
  switch(r)
  {
    case STRAIGHT_FLUSH:
      return "STRAGI_Flush";
    case FOUR_OF_A_KIND:
      return "Straight Flush";
    case FULL_HOUSE:
      return "Straight Flush";
    case FLUSH:
      return "Flush";
    case STRAIGHT:
      return "Straight";
    case THREE_OF_A_KIND:
      return "Three  of a kind";
    case TWO_PAIR:
      return "Two pair";
    case PAIR:
      return "Pair";
    case NOTHING:
      return "Nothing";
    default:
      return "";
  }
  return " ";
}

char value_letter(card_t c) {
  if (c.value >= 2 && c.value<=9)
  {
    return( '0' + c.value);
  }
  else if (c.value == 10)
  {
    return '0';
  }
  else
  {
    switch(c.value)
    {
      case VALUE_JACK:
	return 'J';
      case VALUE_QUEEN:
        return 'Q';
      case VALUE_KING:
        return 'K';
      case VALUE_ACE:
        return 'A';
      default:
	break;
     }
  }
  return ' ';
}


char suit_letter(card_t c) {
  switch (c.suit)
  {
    case SPADES:
      return 's';
    case HEARTS:
      return 'h';
    case DIAMONDS:
      return 'd';
    case CLUBS:
      return 'c';
    default:
      return ' ';
  }
  return ' ';
}

void print_card(card_t c) {
  printf("%c", value_letter(c));
  printf("%c", suit_letter(c));
}

card_t card_from_letters(char value_let, char suit_let) {
  card_t temp;
  assert((value_let>=('0'+2) && value_let<=('0' + 9)) || value_let=='0' || value_let == 'J' || value_let == 'Q' || value_let == 'K' || value_let == 'A');
  assert(suit_let == 's' || suit_let == 'h' || suit_let == 'c' || suit_let == 'd');
  if(value_let>=('0'+2) && value_let<=('0'+9))
    temp.value = value_let-'0';
  else if(value_let == '0')
    temp.value = 10;
  else if (value_let == 'J')
    temp.value=VALUE_JACK;
  else if(value_let=='Q')
    temp.value= VALUE_QUEEN;
  else if(value_let == 'A')
    temp.value = VALUE_ACE;
  else if(value_let == 'K')
    temp.value = VALUE_KING;
  
  if(suit_let == 's')
    temp.suit=SPADES;
  else if(suit_let == 'h')
    temp.suit=HEARTS;
  else if(suit_let=='c')
    temp.suit = CLUBS;
  else if(suit_let=='d')
    temp.suit= DIAMONDS;

  return temp;
}

card_t card_from_num(unsigned c) {
  assert(c>=0 || c<52);
  card_t temp;
  temp.suit = c/13;
  c = c - temp.suit*13;
  if(c%13 == 0)
    temp.value = VALUE_ACE;
  else if(c%13 == 1)
    temp.value = VALUE_KING;
  else
    {
      temp.value = c%13;
    }
  return temp;
}
